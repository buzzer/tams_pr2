<?xml version="1.0"?>
<launch>
  <!-- This launch file starts all RACE components, most of which depend on the
       blackboard. It is assumed that the basic PR2 software (real or Gazebo) and the
       race_prerequisites.launch are running. -->
  <!-- use pick position offset of sim if you're in simulation, set sim:=true
        otherwise, set sim:=false -->
  <arg name="sim" default="true"/>
  
  
  <include file="$(find pr2_machine)/$(env ROBOT).machine" />

  <!--Planning domain to use-->
  <arg name="domain" default="$(find race_shop2_planner)/domains/race_owl_domain.lisp"/>

  <!-- Define the blackboard config, i.e. the sesame_server: remote or local -->
  <arg name="sesame_remote" default="true"/>

  <!-- sesame server -->
  <arg if="$(arg sesame_remote)" name="sesame_server" default="http://hitec-race.informatik.uni-hamburg.de:8080/openrdf-sesame/" />
  <arg unless="$(arg sesame_remote)" name="sesame_server" default="http://localhost:8080/openrdf-sesame/" />  

  <!-- sesame repo to use; mandatory, set it like this:
          roslaunch race_bringup race_common.launch sesame_repo:='22'
       -->
  <arg name="sesame_repo" />

  <arg name="use_shop2" default="true" />

  <!--Serve or clear scenario?-->
  <arg name="serve" default="false" />
  <arg name="clear_12a" default="false" />
  <arg name="clear_12b" default="false" />
  <arg name="demo_21a" default="false" /> <!--Avoid obstacle scenario-->
  <arg name="demo_21b" default="false" /> <!--Avoid obstacle scenario-->
  <arg name="demo_21c" default="false" /> <!--Avoid obstacle scenario-->
  <arg name="demo_22a" default="false" /> <!--Clear table smartly scenario-->
  <arg name="demo_22b" default="false" /> <!--Clear table smartly scenario-->
  <arg name="demo_24a" default="false"/>
  <arg name="demo_24b" default="false"/>
  <arg name="oru_ecai" default="false"/>
  <arg name="demo_311a" default="false"/>
  <arg name="demo_311b" default="false"/>
  <arg name="demo_iros15b" default="false"/> <!-- IROS 2015 replanning -->
  <arg name="demo_312a" default="false"/>
  <arg name="demo_32a" default="false"/>
  <arg name="demo_32c" default="false"/>

  <include file="$(find race_proprioception)/launch/monitors.launch" />

  <include if="$(arg use_shop2)" file="$(find race_shop2_planner)/launch/race_shop2_planner.launch">
      <arg name="domain" value="$(arg domain)" />
  </include>

  <!-- <include file="$(find race_owl_reasoner)/launch/race_owl_reasoner.launch" /> -->

  <node pkg="race_bb" type="blackboard.py" name="blackboard_node" output="screen">
    <param name="topics_config" value="$(find race_bringup)/config/bb_topics.yaml" />
    <param name="sesame_server" value="$(arg sesame_server)" />
    <param name="sesame_repo" value="$(arg sesame_repo)" />
  </node>
   
  <include file="$(find race_spatial_reasoner)/launch/race_spatial_reasoner.launch" />
 
  <node machine="c2" pkg="race_experience_extractor" type="experience_extractor.py" name="race_xx" output="screen">   </node>

  <node machine="c2" pkg="race_episodes" type="episode.py" name="race_episodes" output="screen">   </node>

  <node machine="c2" pkg="race_visualization_tools" type="area_marker_publisher.py" name="area_marker_publisher" output="screen"/>

  <!-- laser scan filtering for move_base_straight -->
  <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="base_scan_laser_filter">
    <remap from="scan" to="base_scan"/>
    <remap from="scan_filtered" to="base_scan_filtered"/>
    <rosparam command="load" file="$(find race_bringup)/config/laser_filters.yaml"/>
  </node>

  <!-- Start the move_base_straight actionlib server -->
  <node machine="c2" name="move_base_straight" pkg="move_base_straight" type="move_base_straight.py" respawn="true" output="screen">
    <remap from="/base_scan" to="base_scan_filtered" />
  </node>

  <!-- Start the carryarm_actionlib server -->
  <node machine="c2" name="carryarm" pkg="carryarm_actionlib" type="carryarm_server" args="" respawn="true" output="screen" />
  
  <node machine="c1" name="world_state_tracker" pkg="race_world_state_tracker" type="world_state_tracker.py" output="screen" />


  <!-- pick position offset for simulation -->
  <node if="$(arg sim)" machine="c2" name="tray_pick_place" pkg="tray_pick_place" type="tray_pick_place_actionserver" args="0.01 0.01 0.02" output="screen" />
    <!-- pick position offset for simulation -->
  <node unless="$(arg sim)" machine="c2" name="tray_pick_place" pkg="tray_pick_place" type="tray_pick_place_actionserver" args="-0.015 -0.015 0.005" output="screen" />
  
  <node machine="c2" name="tray_palm_tf_listener" pkg="tray_pick_place" type="tray_palm_tf_listener" output="screen" />
  <node machine="c1" name="race_tray_monitor" pkg="race_tray_monitor" type="race_tray_monitor" respawn="false"/>

  <!-- load common static knowledge -->
  <include file="$(find race_bringup)/launch/load_static_knowledge.launch" />

  <!-- Start the area validator (including obstacle_detection and wait_until_unblocked actions) -->
  <include if="$(arg demo_21a)" file="$(find race_area_validation)/launch/race_area_validator.launch" />
  <include if="$(arg demo_21b)" file="$(find race_area_validation)/launch/race_area_validator.launch" />
  <include if="$(arg demo_21c)" file="$(find race_area_validation)/launch/race_area_validator.launch" />
  <include if="$(arg demo_22a)" file="$(find race_area_validation)/launch/race_area_validator.launch" />
  <include if="$(arg demo_22b)" file="$(find race_area_validation)/launch/race_area_validator.launch" />

  <include if="$(arg oru_ecai)" file="$(find race_area_validation)/launch/race_area_validator.launch" />

  <!-- anchoring -->
  <include if="$(arg demo_21a)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg demo_21b)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg demo_21c)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg demo_22a)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg demo_22b)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg oru_ecai)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
  </include>
  <include if="$(arg demo_32a)" file="$(find race_perception_bringup)/launch/anchoring.launch">
    <arg name="use_removed_object_detection" value="false" />
    <arg name="pgm_weights_file" value="$(find race_object_anchoring)/pgm_weights/demo_32_weights" />
  </include>

  <node name="tabletop_object_publisher" pkg="race_tabletop_object_publisher" type="tabletop_object_publisher.py" output="screen" />

  <!-- mockup for affordance exceptions service -->
  <!--
  <include file="$(find race_shop2_planner)/launch/affordance_exceptions_mockup.launch">
    <arg name="demo_22b" value="$(arg demo_22b)" />
  </include> -->

  <include file="$(find race_affordance)/launch/race_affordance.launch" />


  <!-- plan execution (semantic ExMo) -->

  <node machine="c2" name="execution_middlelayer" pkg="race_plan_executor" type="execution_middlelayer.py" output="screen" respawn="true">
    <!-- use service provided by tabletop_object_publisher -->
    <remap from="object_detection" to="wrapped_object_detection" />
  </node>

  <include file="$(find race_plan_execution_monitor)/launch/semantic_dispatcher.launch" />

  <!--Start the PR2 SpeedMarker-->
  <node machine="c2" name="speedmarker" pkg="race_pr2_markers" type="speedmarker" output="screen" />

  <!-- Imagination -->
  <include file="$(find race_imagination)/launch/sim_dispatcher.launch" />
  <node machine="c2" name="sim_wrapper" pkg="race_imagination" type="sim_wrapper" output="screen" respawn="false" />
  <node machine="c2" name="imagine_state_translator" pkg="race_plan_executor" type="imagine_state_translator.py" output="screen">
  </node>

  <arg name="kinect_prefix" default="/head_mount_kinect" /> 
  <!--throttle rate when possible-->
  <node name="$(anon dynparam)" pkg="dynamic_reconfigure"
    type="dynparam" args="set $(arg kinect_prefix)/driver data_skip 10" />
  <!--Reset the kinect data rate to as fast as possible-->
  <node if="$(arg demo_24a)" name="$(anon dynparam)" pkg="dynamic_reconfigure"
    type="dynparam" args="set $(arg kinect_prefix)/driver data_skip 0" />
  <node if="$(arg demo_24b)" name="$(anon dynparam)" pkg="dynamic_reconfigure"
    type="dynparam" args="set $(arg kinect_prefix)/driver data_skip 0" />
  <node if="$(arg demo_32a)" name="$(anon dynparam)" pkg="dynamic_reconfigure"
    type="dynparam" args="set $(arg kinect_prefix)/driver data_skip 0" />

  <group if="$(arg demo_iros15b)">
    <!-- Move torso up to free the tray -->
    <node name="move_torso_up" pkg="carryarm_actionlib" type="torso_up" output="screen" />
     <!-- Move arms to side -->
     <node name="move_arms_to_side" pkg="carryarm_actionlib" type="move_arms_to_side" output="screen" />
  </group>

  <group if="$(arg demo_312a)">
    <!-- Tuck Arms For Navigation -->
    <node name="tuckarms" pkg="pr2_tuckarm" type="tuck_arms.py" args="b" output="screen" />
    <!-- Move torso up to free the tray -->
    <node name="move_torso_up" pkg="carryarm_actionlib" type="torso_up" output="screen" />
  </group>

  <group if="$(arg demo_32a)">
    <!-- Tuck Arms For Navigation -->
    <node name="tuckarms" pkg="pr2_tuckarm" type="tuck_arms.py" args="b" output="screen" />
    <!-- Move torso up to free the tray -->
    <node name="move_torso_up" pkg="carryarm_actionlib" type="torso_up" output="screen" />
  </group>
</launch>
