/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-fuerte-common-tutorials-0.2.3/debian/ros-fuerte-common-tutorials/opt/ros/fuerte/stacks/common_tutorials/actionlib_tutorials/msg/CarryarmGoal.msg */
#ifndef ACTIONLIB_TUTORIALS_MESSAGE_CARRYARMGOAL_H
#define ACTIONLIB_TUTORIALS_MESSAGE_CARRYARMGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace actionlib_tutorials
{
template <class ContainerAllocator>
struct CarryarmGoal_ {
  typedef CarryarmGoal_<ContainerAllocator> Type;

  CarryarmGoal_()
  : carrypose(0)
  {
  }

  CarryarmGoal_(const ContainerAllocator& _alloc)
  : carrypose(0)
  {
  }

  typedef int32_t _carrypose_type;
  int32_t carrypose;


  typedef boost::shared_ptr< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct CarryarmGoal
typedef  ::actionlib_tutorials::CarryarmGoal_<std::allocator<void> > CarryarmGoal;

typedef boost::shared_ptr< ::actionlib_tutorials::CarryarmGoal> CarryarmGoalPtr;
typedef boost::shared_ptr< ::actionlib_tutorials::CarryarmGoal const> CarryarmGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace actionlib_tutorials

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "6889063349a00b249bd1661df429d822";
  }

  static const char* value(const  ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x6889063349a00b24ULL;
  static const uint64_t static_value2 = 0x9bd1661df429d822ULL;
};

template<class ContainerAllocator>
struct DataType< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "actionlib_tutorials/CarryarmGoal";
  }

  static const char* value(const  ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
int32 carrypose\n\
\n\
";
  }

  static const char* value(const  ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.carrypose);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct CarryarmGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::actionlib_tutorials::CarryarmGoal_<ContainerAllocator> & v) 
  {
    s << indent << "carrypose: ";
    Printer<int32_t>::stream(s, indent + "  ", v.carrypose);
  }
};


} // namespace message_operations
} // namespace ros

#endif // ACTIONLIB_TUTORIALS_MESSAGE_CARRYARMGOAL_H

